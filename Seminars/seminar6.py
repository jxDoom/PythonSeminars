# from random import randint
# def square(sp):
#     rezult = []
#     for item in sp:
#         rezult.append(item**2)
#     return rezult

# def find4_and_square(sp):
#     rezult = []
#     for item in sp:
#         if item > 4:
#             rezult.append(item**2)
#     return rezult

# sp = [1, 5, 3, 8, 10, 2]
# print(5 in sp)
# print(5 not in sp)
# print(find4_and_square(sp))
# print([item**2 for item in sp if item > 4])
# # print(sum(sp))
# # print(square(sp))
# # print([item**2 for item in sp])
# # print([randint(0,10) for _ in range(10)])

# -----------------------------------------------------------------------------------
#Задача 39
# Даны два массива чисел. Требуется вывести те элементы первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество элементов во втором массиве. Затем элементы второго массива

from random import randint

# def Rand(size):
#     tmp = [randint(0, 10) for i in range(size)]
#     return tmp

# n: int = int(input('Количество элементов в первом массиве: '))
# m: int = int(input('Количество элементов во втором массиве: '))

# arr_n = Rand(n)
# print(arr_n)
# arr_m = Rand(m)
# print(arr_m)

# res = [item for item in arr_n if item not in arr_m]
# print(res)

# ----------------------------------------------------------------------------
# Задача 40
# Дан массив, состоящий из целых чисел. Напишите программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# 5 4 3 2 1 5 3     #скругленный массив
# ответ будет 2

# def check_neighbours(index, array):
#     if array[(index + 1) % len(array)] < array[index] and array[index - 1]  < array[index]:
#         return True

# arr_length: int = int(input("Введите N: "))
# arr = [randint(1, 5) for _ in range(arr_length)]
# print(arr)

# result = [1 for index in range(len(arr)) if check_neighbours(index, arr)]
# print(sum(result))

# # Другое решение
# sp1 = [1,2,3,4,5]
# sp2 = [1,5,1,5,1]

# def both_less(sp):
#     count = 0
#     for i in range(len(sp)):
#         if sp[i - 1] < sp[i] >  sp[i - len(sp) + 1]:
#             count += 1
#     print(count)
            
#     # print(i for i in range(len(sp)) if (sp[i - 1] < sp[i] and sp[i] > sp[i - len(sp) + 1]))
# both_less(sp1)
# both_less(sp2)
# -------------------------------------------------------------------------------------
# **Задача XO необязательная**. 
# Сделайте игру крестики - нолики, человек должен играть с ботом, поле 3*3.
# Конечно, бот не должен ходить на занятые поля
# Если есть желание, то можете наделить бота псевдоинтеллектом,чтоб он ходил как можно ближе к своим занятым клеткам
# После каждого  хода на экран должна выводиться текущая обстановка на поле.
# Например,
  
# __________
#     |     |  Х | 
# __________
#     |     |  O |
# __________
#     |     |  O |
# __________
# При ходе пользователя у надо спрашивать номер строки и столбца, куда он хочет сделать ход

# field = [[None, None, None],
#          [None, None, None],
#          [None, None, None]]

# -------------------------------------------------------------------------
# Задача 43
# Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару, которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных строках.
#1 2 3 2 3  вывод 2

# sp = [randint(0, 5) for _ in range(10)]
# summ = 0
# for i in set(sp):
#     # print(i, sp.count(i))
#     summ += sp.count(i) // 2

# print(sp)
# print(summ)

# Другое решение
# from random import randint
# N = int(input("Введите количество элементов списка: "))
# sp = [randint(1,5) for _ in range(N)] 

# print(sum([sp.count(i)//2 for i in set(sp)]))
# --------------------------------------------------------------------------
# Задача 45
# Два различных натуральных числа n и m называются дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не превосходящее 10^5. Программа должна вывести все
# пары дружественных чисел, каждое из которых не превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть выведена только один раз (перестановка чисел новую
# пару не дает).

k = int(input("Введите число k: "))

def deliteli(value):
    deliteli = []
    for num in range(1, value // 2 + 1):
        if value % num == 0:
            deliteli.append(num)
    return deliteli

for m in range(2, k):
    n = sum(deliteli(m))
    if m == sum(deliteli(n)) and m < n:
        print(m, n)